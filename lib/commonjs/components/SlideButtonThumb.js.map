{"version":3,"sources":["SlideButtonThumb.tsx"],"names":["DEFAULT_ICON_CONTAINER_COLOR","SlideButtonThumb","icon","gestureHandler","translateX","height","padding","endReached","borderRadius","thumbStyle","animStarted","animEnded","isRTL","animation","animationDuration","dynamicResetEnabled","dynamicResetDelaying","opacityValue","play","repeatCount","value","duration","easing","Easing","inOut","ease","animFinished","stop","thumbAnimStyle","opacity","transform","thumbDynamicStyle","left","width","iconContainerDynamicStyle","scaleX","React","useEffect","styles","thumbContainer","iconContainer","memo","StyleSheet","create","position","alignItems","justifyContent","backgroundColor","elevation"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {StyleProp, StyleSheet, ViewStyle} from 'react-native';\nimport {\n  GestureEvent,\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  cancelAnimation,\n  Easing,\n  runOnJS,\n  useAnimatedStyle,\n  useSharedValue,\n  withRepeat,\n  withTiming,\n} from 'react-native-reanimated';\n\nimport {SlideButtonCommonProps} from './SlideButton';\n\nconst DEFAULT_ICON_CONTAINER_COLOR = '#FFFFFF';\n\nexport interface SlideButtonThumbProps extends SlideButtonCommonProps {\n  gestureHandler?:\n    | ((event: GestureEvent<PanGestureHandlerEventPayload>) => void)\n    | undefined;\n  icon?: React.ReactNode;\n  thumbStyle?: StyleProp<ViewStyle>;\n  animStarted?: () => void;\n  animEnded?: () => void;\n  isRTL: boolean;\n}\n\nconst SlideButtonThumb = ({\n  icon,\n  gestureHandler,\n  translateX,\n  height,\n  padding,\n  endReached,\n  borderRadius,\n  thumbStyle,\n  animStarted,\n  animEnded,\n  isRTL,\n  animation,\n  animationDuration,\n  dynamicResetEnabled,\n  dynamicResetDelaying,\n  \n}: SlideButtonThumbProps) => {\n\n  const opacityValue = useSharedValue(1);\n\n  const play = () => {\n    const repeatCount = dynamicResetEnabled ? -1 : 6;\n    opacityValue.value = withRepeat(\n      withTiming(\n        0.4,\n        {duration: animationDuration!, easing: Easing.inOut(Easing.ease)},\n      ),\n      repeatCount,\n      true,\n      () => {\n        runOnJS(animFinished)();\n      },\n    );\n  };\n\n  const stop = () => {\n    cancelAnimation(opacityValue);\n    runOnJS(animFinished)();\n  }\n\n  const animFinished = () => {\n    animEnded && animEnded();\n  };\n\n  const thumbAnimStyle = useAnimatedStyle(() => {\n    return {\n      opacity: endReached ? opacityValue.value : 1,\n      transform: [{translateX: translateX.value}],\n    };\n  });\n\n  //const KEY = isRTL ? 'right' : 'left';\n  const thumbDynamicStyle = {\n    left: padding,\n    width: height,\n    height,\n    borderRadius,\n  };\n\n  const iconContainerDynamicStyle = {\n    width: height,\n    height,\n    borderRadius,\n    transform: [{scaleX: isRTL ? -1 : 1}],\n  };\n\n  React.useEffect(() => {\n    if (endReached) {\n      if (animation) {\n        animStarted && animStarted();\n        play();\n      }  \n    }\n  }, [endReached]);\n\n  React.useEffect(() => {\n    if (dynamicResetEnabled) {\n      if (!dynamicResetDelaying) {\n        stop()\n      }  \n    }\n  }, [dynamicResetDelaying]);\n\n  return (\n    <PanGestureHandler onGestureEvent={gestureHandler}>\n      <Animated.View\n        testID=\"ThumbContainer\"\n        style={[\n          styles.thumbContainer,\n          thumbAnimStyle,\n          thumbDynamicStyle,\n          thumbStyle,\n        ]}>\n        <Animated.View\n          testID=\"IconContainer\"\n          style={[styles.iconContainer, iconContainerDynamicStyle]}>\n          {icon}\n        </Animated.View>\n      </Animated.View>\n    </PanGestureHandler>\n  );\n};\n\nexport default React.memo(SlideButtonThumb);\n\nconst styles = StyleSheet.create({\n  thumbContainer: {\n    position: 'absolute',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: DEFAULT_ICON_CONTAINER_COLOR,\n    // shadowColor: '#000',\n    // shadowOffset: {\n    //   width: 0,\n    //   height: 1,\n    // },\n    // shadowOpacity: 0.22,\n    // shadowRadius: 2.22,\n    elevation: 3,\n  },\n  iconContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]}